{% extends "rhino/base.jj" %}

{% block settings %}
    {{ super() }}

    {% if stream_items %}
        <div id="new-updates" class="hidden">
            <a href="{{ url_for('home') }}">
                <span class="items"></span>
                <span class="and">and</span>
                <span class="replies"></span>
            </a>
        </div>
    {% endif %}
{% endblock %}

{% block content %}

    {% if stream_items %}
        {% for item in stream_items %}
            {% include "rhino/streamitem.jj" %}
        {% endfor %}

        <div id="navigate">
            <span><img src="{{ url_for('rhino-static', path='img/loadinfo.net.gif') }}" width="16" height="16"> Loading...</span>
        </div>

        <script type="text/javascript">
        var maxstreamitem = {{ maxstreamitem }};
        var maxreplyitem = {{ maxreplyitem }};
        var pagetitle = '{{ page_title|e }}';

        var oldest_item_date = '{{ stream_items[-1].time.strftime('%Y-%m-%dT%H:%M:%S') }}';
        var showing_more = false;

        function showMore() {
            if (showing_more)
                return;
            showing_more = true;

            var $nav = $('#navigate');
            $.ajax({
                url: '{{ url_for('stream') }}',
                data: { html: true, before: oldest_item_date },
                success: function (data) {
                    var $nextpage = $('<div/>');
                    $nav.before($nextpage);

                    var items = data['items'];
                    var had_new = false;
                    $.each(items, function (i, val) {
                        if (!$('#item-' + val['id']).size()) {
                            $nextpage.append(val['html']);
                            had_new = true;
                        }
                    });

                    if (!had_new) {
                        $('#navigate span').text('All done! No more items!');
                        return;  // still "showing_more"
                    }

                    oldest_item_date = items.slice(-1)[0]['time'];
                    showing_more = false;

                    $nextpage.find('.relativedatestamp').each(function (i, val) {
                        $(val).html($.relatizeDate.timeAgoInWords(new Date($(val).attr('title')), true));
                    });
                    setUpResponseLinks($nextpage);
                },
                error: function (xhr) {
                    $('#navigate span').text(xhr.responseText);
                    showing_more = false;
                }
            });
        }

        function setUpPaginator() {
            $(window).scroll(function () {
                if ($(window).scrollTop() > $(document).height() - 3 * $(window).height()) {
                    showMore();
                }
            });
        }

        function checkForUpdates() {
            $.getJSON('{{ url_for('new-items') }}', {maxstreamitem: maxstreamitem, maxreplyitem: maxreplyitem}, function (data) {
                var totalnew = data['streamitems'] + data['replyitems'];
                if (totalnew) {
                    document.title = '(' + totalnew + ') ' + pagetitle;

                    var $nupdates = $('#new-updates');
                    if (data['streamitems'])
                        $nupdates.find('.items').text(data['streamitems'] + ' new ' + (data['streamitems'] > 1 ? 'items' : 'item')).show();
                    if (data['replyitems'])
                        $nupdates.find('.replies').text(data['replyitems'] + ' new ' + (data['replyitems'] > 1 ? 'replies' : 'reply')).show();
                    if (data['streamitems'] && data['replyitems'])
                        $nupdates.find('.and').show();
                    $nupdates.show();
                }
            });
        }

        function setUpResponseLinks($root) {
            if (!$root)
                $root = $(document);

            $root.find('.response-twitter .favorite').click(function () {
                var $favlink = $(this);
                $favlink.addClass('spinning');

                $.ajax({
                    url: '{{ url_for('action-twitter-favorite') }}',
                    type: 'POST',
                    data: {'tweet': $favlink.parent('.response-twitter').attr('data-tweet')},
                    dataType: 'text',
                    success: function (data) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('favorited');
                        $favlink.text("Marked a favorite!");
                    },
                    error: function (xhr) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('nogo');
                        $favlink.text(xhr.responseText);
                    }
                });

                return false;
            });
            $root.find('.response-twitter .retweet').click(function () {
                var $favlink = $(this);
                $favlink.addClass('spinning');

                $.ajax({
                    url: '{{ url_for('action-twitter-retweet') }}',
                    type: 'POST',
                    data: {'tweet': $favlink.parent('.response-twitter').attr('data-tweet')},
                    dataType: 'text',
                    success: function (data) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('retweeted');
                        $favlink.text("Retweeted!");
                    },
                    error: function (data) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('nogo');
                        $favlink.text(xhr.responseText);
                    }
                });

                return false;
            });
            $root.find('.response-typepad .favorite').click(function () {
                var $favlink = $(this);
                if ($favlink.hasClass('nogo')) {
                    return false;
                }
                $favlink.addClass('spinning');

                $.ajax({
                    url: '{{ url_for('action-typepad-favorite') }}',
                    type: 'POST',
                    data: {'post': $favlink.parent('.response').attr('data-post')},
                    dataType: 'text',
                    success: function (data) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('favorited');
                        $favlink.text("Marked a favorite!");
                    },
                    error: function (xhr) {
                        $favlink.removeClass('spinning');
                        if (xhr.responseText == "Can't favorite Group assets") {
                            $favlink.addClass('nogo');
                            $favlink.text("Can't favorite posts from TypePad Groups :(");
                        }
                    }
                });

                return false;
            });
            $root.find('.response-flickr .favorite').click(function () {
                var $favlink = $(this);
                $favlink.addClass('spinning');

                $.ajax({
                    url: '{{ url_for('action-flickr-favorite') }}',
                    type: 'POST',
                    data: {'photo': $favlink.parent('.response-flickr').attr('data-photo')},
                    dataType: 'text',
                    success: function (data) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('favorited');
                        $favlink.text("Marked a favorite!");
                    },
                    error: function (xhr) {
                        $favlink.removeClass('spinning');
                    }
                });

                return false;
            });
        }

        function updateTimestamps() {
            $('.relativedatestamp').each(function (i, val) {
                $(val).html($.relatizeDate.timeAgoInWords(new Date($(val).attr('title')), true));
            });
        }

        $(document).ready(function () {
            setUpPaginator();
            setUpResponseLinks();
            setInterval("checkForUpdates()", 3 * 60 * 1000);

            updateTimestamps();
            setInterval("updateTimestamps()", 60 * 1000);
        });
        </script>
    {% else %}
        <div class="item">
            <div class="item-content">
                <h1 class="title">Welcome!</h1>
                <div>We're looking for your stuff so check back in a minute.</div>
            </div>
        </div>
    {% endif %}

{% endblock %}
